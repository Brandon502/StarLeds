<!DOCTYPE html>
<html>
<head>
    <title>StarMod by MoonModules</title>
    <link rel="stylesheet" href="index.css">
    <script src="index.js"></script>
    <script>
      let ws;
      let d = document;
      let columnNr = 0;
      let nrOfColumns = 4;
      function gId(c) {return d.getElementById(c);}
      function cE(e) { return d.createElement(e); }

      function onLoad() {
        let url = (window.location.protocol == "https:"?"wss":"ws")+'://'+window.location.hostname+'/ws';
        console.log("onLoad url", url);
        ws = new WebSocket(url);
        ws.binaryType = "arraybuffer";
    	  ws.onmessage = (e)=>{
          let json = JSON.parse(e.data);
          if (json[0] && json[0].incldef) { //generate array of objects
            console.log("WS receive generateHTML", json);
            generateHTML(null, json);
          }
          else { //update
            // console.log("WS receive update", json);
            processUpdate(json);
          }
        }
        ws.onclose = (e)=>{
          console.log("WS close", e);
        }
        ws.onopen = (e)=>{
          console.log("WS open", e);
        }
      }

      function requestJson(command) {
        let url = `http://${window.location.hostname}/json`;
        let req = JSON.stringify(command);

        console.log("requestJson", url, command);

        ws.send(req?req:'{"v":true}');
        return;

        //not used at the moment as WebSockets only
        fetch(url, {
          method: 'post',
          headers: {
            "Content-type": "application/json; charset=UTF-8"
          },
          body: req
        })
        .then(res => {
          if (res) console.log("requestJson res", res, res.json());
        })
        .then(json => {
          if (json) console.log("requestJson json", json);
        })
        .catch((e)=>{
          console.log("requestJson catch", e);
        });
      }

      function setInput(element) {
        var command = {};
        command[element.id] = element.value;
        // console.log("setInput", command);

        requestJson(command);
      }
      function setCheckbox(element) {
        var command = {};
        command[element.id] = element.checked;
        // console.log("setCheckbox", command);

        requestJson(command);
      }
      function setButton(element) {
        var command = {};
        command[element.id] = "push";
        // console.log("setCheckbox", command);

        requestJson(command);
      }

      function setDropdown(element) {
        var command = {};
        command[element.id] = element.value;
        // console.log("setInput", command);

        requestJson(command);
      }

      function generateHTML(parentNode, json) {
        // console.log("generateHTML", json);
        if (Array.isArray(json)) for (var element of json) //if isArray then objects of array
          generateHTML(parentNode, element);
        else {
          if (parentNode == null) {
            parentNode = gId("column" + columnNr);
            columnNr = (columnNr +1)%nrOfColumns;
          }
          var newNode = null;
          let label = cE("label");
          label.innerHTML = json.prompt;

          if (json.type == "group") {
            newNode = cE("div");
            newNode.id = json.prompt
            newNode.draggable = true;
            newNode.className = "box";
            let h2 = cE("h2");
            h2.innerHTML = json.prompt;
            newNode.appendChild(h2);
            setupBox(newNode);
          }
          else if (json.type == "display") {
            newNode = cE("p");
            newNode.appendChild(label);
            let field = cE("span");
            field.id = json.prompt;
            field.innerHTML = json.value;
            newNode.appendChild(field);
          }
          else if (json.type == "dropdown") {
            newNode = cE("p");
            newNode.appendChild(label);
            let field = cE("select");
            field.id = json.prompt;
            field.addEventListener('change', (event) => {console.log("dropdown change", event);setDropdown(event.target);});
            newNode.appendChild(field);
            //(default) value will be set in processUpdate
          }
          else {
            newNode = cE("p");
            if (json.type != "button") newNode.appendChild(label);
            let field = cE("input");
            field.id = json.prompt;
            field.type = json.type;
            if (json.type == "checkbox") {
              field.checked = json.value;
              field.addEventListener('change', (event) => {console.log(json.type + " change", event);setCheckbox(event.target);});
            } else if (json.type == "button") {
              field.value = json.value;
              field.addEventListener('click', (event) => {console.log(json.type + " change", event);setButton(event.target);});
            } else {
              field.value = json.value;
              field.addEventListener('change', (event) => {console.log(json.type + " change", event);setInput(event.target);});
            }
            newNode.appendChild(field);
          }

          if (newNode) parentNode.appendChild(newNode); //add new node to parent

          if (json.uiFun >= 0) { //>=0 as element in object
            var command = {};
            command["uiFun"] = json.prompt; //ask for uiFun (to add the options)
            requestJson(command);
          }

          if (json.n) generateHTML(newNode, json.n); //details (e.g. group)

        }
      }

      function processUpdate(json) {
        // console.log("processUpdate", json);
        for (var key of Object.keys(json)) {
          // console.log("processUpdate", key, json[key]);
          if (key != "uiFun") { //was the request
            // let id = gId(key);
            if (json[key].label) {
              console.log("processUpdate label", key, json[key].label);
              // gId(json.uiFun).insertAdjacentHTML("beforebegin", `<label>${json.label}</label> `);
              gId(key).parentNode.firstChild.innerHTML = json[key].label; //the <label>
            }
            if (json[key].comment) {
              console.log("processUpdate comment", key, json[key].comment);
              gId(key).insertAdjacentHTML("afterend", `<comment>${json[key].comment}</comment>`);
            }
            if (json[key].lov) {
              console.log("processUpdate lov", key, json[key].lov);
              var index = 0;
              for (var x of json[key].lov) {
                let opt = document.createElement("option");
                opt.value = index;
                opt.text = x;
                gId(key).appendChild(opt);
                index++;
              }
            }
            if (json[key].value) { //after lov, in case used
              console.log("processUpdate value", key, json[key].value, gId(key));
              // if (gId(key).textContent && !json[key].lov) //display (select element has also textContent)
              if (gId(key).nodeName.toLocaleLowerCase() == "span") //display
                gId(key).textContent = json[key].value;
              else if (gId(key).type == "checkbox") //checkbox
                gId(key).checked = json[key].value;
              else //inputs
                gId(key).value = json[key].value;
            }
          }
        }
      }
      </script>
</head>
<body onload="onLoad()">
    <h1>StarMod by MoonModules</h1>
    <div class="container">
      <div id="column0" class = "column">
      </div>
      <div id="column1" class = "column">
      </div>
      <div id="column2" class = "column">
      </div>
      <div id="column3" class = "column">
      </div>
    </div>
  </body>
</html>